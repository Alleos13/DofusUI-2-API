import java.io.File;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

public class ConvertApiClasses {


    private final static ArrayList<String> hooks = new ArrayList<String>();
    private final static ArrayList<String> actions = new ArrayList<String>();

    static {
        actions.add("AchievementDetailedListRequest");
        actions.add("AchievementDetailsRequest");
        actions.add("AchievementRewardRequest");
        actions.add("AcquaintanceSearch");
        actions.add("AddBehaviorToStack");
        actions.add("AddEnemy");
        actions.add("AddFriend");
        actions.add("AddIgnored");
        actions.add("AgreementAgreed");
        actions.add("AllianceChangeGuildRights");
        actions.add("AllianceCreationValid");
        actions.add("AllianceFactsRequest");
        actions.add("AllianceInsiderInfoRequest");
        actions.add("AllianceInvitation");
        actions.add("AllianceInvitationAnswer");
        actions.add("AllianceKickRequest");
        actions.add("AllianceListRequest");
        actions.add("AllianceModificationEmblemValid");
        actions.add("AllianceModificationNameAndTagValid");
        actions.add("AllianceModificationValid");
        actions.add("ArenaFightAnswer");
        actions.add("ArenaRegister");
        actions.add("ArenaUnregister");
        actions.add("AuthorizedCommand");
        actions.add("BannerEmptySlotClick");
        actions.add("BasicSwitchMode");
        actions.add("BasicWhoIsRequest");
        actions.add("BidHouseStringSearch");
        actions.add("BidSwitchToBuyerMode");
        actions.add("BidSwitchToSellerMode");
        actions.add("ChallengeTargetsListRequest");
        actions.add("ChangeCharacter");
        actions.add("ChangeServer");
        actions.add("ChannelEnabling");
        actions.add("CharacterCreation");
        actions.add("CharacterDeletion");
        actions.add("CharacterDeselection");
        actions.add("CharacterNameSuggestionRequest");
        actions.add("CharacterRecolorSelection");
        actions.add("CharacterRelookSelection");
        actions.add("CharacterRenameSelection");
        actions.add("CharacterReplayRequest");
        actions.add("CharacterReport");
        actions.add("CharacterSelection");
        actions.add("ChatCommand");
        actions.add("ChatLoaded");
        actions.add("ChatRefreshChannel");
        actions.add("ChatRefreshChat");
        actions.add("ChatReport");
        actions.add("ChatSmileyRequest");
        actions.add("ChatTextOutput");
        actions.add("ClearChat");
        actions.add("CloseBook");
        actions.add("CloseInventory");
        actions.add("ContactLookRequestById");
        actions.add("DeleteObject");
        actions.add("DirectSelectionCharacter");
        actions.add("DisableAfk");
        actions.add("DisplayContextualMenu");
        actions.add("DownloadPart");
        actions.add("DungeonPartyFinderAvailableDungeons");
        actions.add("DungeonPartyFinderListen");
        actions.add("DungeonPartyFinderRegister");
        actions.add("EmotePlayRequest");
        actions.add("EmptyStack");
        actions.add("EnemiesListRequest");
        actions.add("ExchangeAccept");
        actions.add("ExchangeBidHouseBuy");
        actions.add("ExchangeBidHouseList");
        actions.add("ExchangeBidHousePrice");
        actions.add("ExchangeBidHouseSearch");
        actions.add("ExchangeBidHouseType");
        actions.add("ExchangeBuy");
        actions.add("ExchangeHandleMountStable");
        actions.add("ExchangeItemGoldAddAsPayment");
        actions.add("ExchangeItemObjectAddAsPayment");
        actions.add("ExchangeMultiCraftSetCrafterCanUseHisRessources");
        actions.add("ExchangeObjectModifyPriced");
        actions.add("ExchangeObjectMove");
        actions.add("ExchangeObjectMoveKama");
        actions.add("ExchangeObjectTransfertAllFromInv");
        actions.add("ExchangeObjectTransfertAllToInv");
        actions.add("ExchangeObjectTransfertExistingFromInv");
        actions.add("ExchangeObjectTransfertExistingToInv");
        actions.add("ExchangeObjectTransfertListFromInv");
        actions.add("ExchangeObjectTransfertListToInv");
        actions.add("ExchangeObjectTransfertListWithQuantityToInv");
        actions.add("ExchangeObjectUseInWorkshop");
        actions.add("ExchangeOnHumanVendorRequest");
        actions.add("ExchangePlayerMultiCraftRequest");
        actions.add("ExchangePlayerRequest");
        actions.add("ExchangeReady");
        actions.add("ExchangeRefuse");
        actions.add("ExchangeReplay");
        actions.add("ExchangeReplayStop");
        actions.add("ExchangeRequestOnMountStock");
        actions.add("ExchangeRequestOnShopStock");
        actions.add("ExchangeRequestOnTaxCollector");
        actions.add("ExchangeSell");
        actions.add("ExchangeSetCraftRecipe");
        actions.add("ExchangeShopStockMouvmentAdd");
        actions.add("ExchangeShopStockMouvmentRemove");
        actions.add("ExchangeShowVendorTax");
        actions.add("ExchangeStartAsVendorRequest");
        actions.add("FightOutput");
        actions.add("FriendGuildSetWarnOnAchievementComplete");
        actions.add("FriendOrGuildMemberLevelUpWarningSet");
        actions.add("FriendSpouseFollow");
        actions.add("FriendWarningSet");
        actions.add("FriendsListRequest");
        actions.add("GameContextKick");
        actions.add("GameContextQuit");
        actions.add("GameFightPlacementPositionRequest");
        actions.add("GameFightReady");
        actions.add("GameFightSpectatePlayerRequest");
        actions.add("GameFightSpellCast");
        actions.add("GameFightTurnFinish");
        actions.add("GameRolePlayFreeSoulRequest");
        actions.add("GameRolePlayTaxCollectorFightRequest");
        actions.add("GetPartInfo");
        actions.add("GetPartsList");
        actions.add("GiftAssignRequest");
        actions.add("GuidedModeQuitRequest");
        actions.add("GuidedModeReturnRequest");
        actions.add("GuildChangeMemberParameters");
        actions.add("GuildCharacsUpgradeRequest");
        actions.add("GuildCreationValid");
        actions.add("GuildFactsRequest");
        actions.add("GuildFarmTeleportRequest");
        actions.add("GuildFightJoinRequest");
        actions.add("GuildFightLeaveRequest");
        actions.add("GuildFightTakePlaceRequest");
        actions.add("GuildGetInformations");
        actions.add("GuildHouseTeleportRequest");
        actions.add("GuildInvitation");
        actions.add("GuildInvitationAnswer");
        actions.add("GuildInvitationByName");
        actions.add("GuildKickRequest");
        actions.add("GuildListRequest");
        actions.add("GuildModificationEmblemValid");
        actions.add("GuildModificationNameValid");
        actions.add("GuildModificationValid");
        actions.add("GuildSpellUpgradeRequest");
        actions.add("HouseBuy");
        actions.add("HouseGuildRightsChange");
        actions.add("HouseGuildRightsView");
        actions.add("HouseGuildShare");
        actions.add("HouseKick");
        actions.add("HouseKickIndoorMerchant");
        actions.add("HouseLockFromInside");
        actions.add("HouseSell");
        actions.add("HouseSellFromInside");
        actions.add("HouseToSellFilter");
        actions.add("HouseToSellListRequest");
        actions.add("IncreaseSpellLevel");
        actions.add("InstalledModuleInfoRequest");
        actions.add("InstalledModuleListRequest");
        actions.add("InteractiveElementActivation");
        actions.add("InventoryPresetDelete");
        actions.add("InventoryPresetItemUpdateRequest");
        actions.add("InventoryPresetSave");
        actions.add("InventoryPresetSaveCustom");
        actions.add("InventoryPresetUse");
        actions.add("JobAllowMultiCraftRequestSet");
        actions.add("JobCrafterContactLookRequest");
        actions.add("JobCrafterDirectoryDefineSettings");
        actions.add("JobCrafterDirectoryEntryRequest");
        actions.add("JobCrafterDirectoryListRequest");
        actions.add("JoinAsSpectatorRequest");
        actions.add("JoinFightRequest");
        actions.add("JoinFriend");
        actions.add("JoinSpouse");
        actions.add("KrosmasterInventoryRequest");
        actions.add("KrosmasterPlayingStatus");
        actions.add("KrosmasterTokenRequest");
        actions.add("KrosmasterTransferRequest");
        actions.add("LeaveBidHouse");
        actions.add("LeaveDialog");
        actions.add("LeaveDialogRequest");
        actions.add("LeaveExchangeMount");
        actions.add("LeaveShopStock");
        actions.add("LivingObjectChangeSkinRequest");
        actions.add("LivingObjectDissociate");
        actions.add("LivingObjectFeed");
        actions.add("LivingObjectMessageRequest");
        actions.add("LockableChangeCode");
        actions.add("LockableUseCode");
        actions.add("LoginValidation");
        actions.add("LoginValidationWithTicket");
        actions.add("MapRunningFightDetailsRequest");
        actions.add("MemberWarningSet");
        actions.add("MimicryObjectEraseRequest");
        actions.add("MimicryObjectFeedAndAssociateRequest");
        actions.add("ModuleDeleteRequest");
        actions.add("ModuleInstallCancel");
        actions.add("ModuleInstallConfirm");
        actions.add("ModuleInstallRequest");
        actions.add("ModuleListRequest");
        actions.add("MoodSmileyRequest");
        actions.add("MountFeedRequest");
        actions.add("MountInfoRequest");
        actions.add("MountInformationInPaddockRequest");
        actions.add("MountReleaseRequest");
        actions.add("MountRenameRequest");
        actions.add("MountSetXpRatioRequest");
        actions.add("MountSterilizeRequest");
        actions.add("MountToggleRidingRequest");
        actions.add("NewsLoginRequest");
        actions.add("NicknameChoiceRequest");
        actions.add("NotificationReset");
        actions.add("NotificationUpdateFlag");
        actions.add("NpcDialogReply");
        actions.add("NpcGenericActionRequest");
        actions.add("NumericWhoIsRequest");
        actions.add("ObjectDrop");
        actions.add("ObjectSetPosition");
        actions.add("ObjectUse");
        actions.add("ObjectUseOnCell");
        actions.add("OpenArena");
        actions.add("OpenBook");
        actions.add("OpenCurrentFight");
        actions.add("OpenInventory");
        actions.add("OpenMainMenu");
        actions.add("OpenMap");
        actions.add("OpenMount");
        actions.add("OpenPopup");
        actions.add("OpenServerSelection");
        actions.add("OpenSmileys");
        actions.add("OpenSocial");
        actions.add("OpenStats");
        actions.add("OpenTeamSearch");
        actions.add("OrnamentSelectRequest");
        actions.add("PaddockBuyRequest");
        actions.add("PaddockMoveItemRequest");
        actions.add("PaddockRemoveItemRequest");
        actions.add("PaddockSellRequest");
        actions.add("PaddockToSellFilter");
        actions.add("PaddockToSellListRequest");
        actions.add("PartyAbdicateThrone");
        actions.add("PartyAcceptInvitation");
        actions.add("PartyAllFollowMember");
        actions.add("PartyAllStopFollowingMember");
        actions.add("PartyCancelInvitation");
        actions.add("PartyFollowMember");
        actions.add("PartyInvitation");
        actions.add("PartyInvitationDetailsRequest");
        actions.add("PartyKickRequest");
        actions.add("PartyLeaveRequest");
        actions.add("PartyNameSetRequest");
        actions.add("PartyPledgeLoyaltyRequest");
        actions.add("PartyRefuseInvitation");
        actions.add("PartyShowMenu");
        actions.add("PartyStopFollowingMember");
        actions.add("PivotCharacter");
        actions.add("PlaySound");
        actions.add("PlayerFightFriendlyAnswer");
        actions.add("PlayerFightRequest");
        actions.add("PlayerStatusUpdateRequest");
        actions.add("PortalUseRequest");
        actions.add("PresetSetPosition");
        actions.add("PrismAttackRequest");
        actions.add("PrismFightJoinLeaveRequest");
        actions.add("PrismFightSwapRequest");
        actions.add("PrismInfoJoinLeaveRequest");
        actions.add("PrismSetSabotagedRequest");
        actions.add("PrismSettingsRequest");
        actions.add("PrismUseRequest");
        actions.add("PrismsListRegister");
        actions.add("QuestInfosRequest");
        actions.add("QuestListRequest");
        actions.add("QuestObjectiveValidation");
        actions.add("QuestStartRequest");
        actions.add("QuitGame");
        actions.add("RemoveBehaviorToStack");
        actions.add("RemoveEnemy");
        actions.add("RemoveFriend");
        actions.add("RemoveIgnored");
        actions.add("ResetGame");
        actions.add("SaveMessage");
        actions.add("ServerSelection");
        actions.add("SetEnableAVARequest");
        actions.add("SetEnablePVPRequest");
        actions.add("ShopArticlesListRequest");
        actions.add("ShopAuthentificationRequest");
        actions.add("ShopBuyRequest");
        actions.add("ShopFrontPageRequest");
        actions.add("ShopSearchRequest");
        actions.add("ShortcutBarAddRequest");
        actions.add("ShortcutBarRemoveRequest");
        actions.add("ShortcutBarSwapRequest");
        actions.add("ShowAllNames");
        actions.add("ShowMonstersInfo");
        actions.add("ShowTacticMode");
        actions.add("SpellSetPosition");
        actions.add("SpouseRequest");
        actions.add("StartZoom");
        actions.add("StatsUpgradeRequest");
        actions.add("StopToListenRunningFight");
        actions.add("SubscribersGiftListRequest");
        actions.add("SwitchCreatureMode");
        actions.add("TabsUpdate");
        actions.add("TeleportBuddiesAnswer");
        actions.add("TeleportRequest");
        actions.add("TeleportToBuddyAnswer");
        actions.add("TimelineEntityClick");
        actions.add("TimelineEntityOut");
        actions.add("TimelineEntityOver");
        actions.add("TitleSelectRequest");
        actions.add("TitlesAndOrnamentsListRequest");
        actions.add("ToggleDematerialization");
        actions.add("ToggleHelpWanted");
        actions.add("ToggleLockFight");
        actions.add("ToggleLockParty");
        actions.add("TogglePointCell");
        actions.add("ToggleWitnessForbidden");
        actions.add("TreasureHuntDigRequest");
        actions.add("TreasureHuntGiveUpRequest");
        actions.add("TreasureHuntLegendaryRequest");
        actions.add("TreasureHuntRequest");
        actions.add("ValidateSpellForget");
    }

    static {
        hooks.add("AchievementDetailedList");
        hooks.add("AchievementDetails");
        hooks.add("AchievementFinished");
        hooks.add("AchievementList");
        hooks.add("AchievementRewardError");
        hooks.add("AchievementRewardSuccess");
        hooks.add("AcquaintanceSearchError");
        hooks.add("AcquaintanceServerList");
        hooks.add("ActivateSound");
        hooks.add("AddBannerButton");
        hooks.add("AddItemHyperlink");
        hooks.add("AddMapFlag");
        hooks.add("AfkModeChanged");
        hooks.add("AgreementsRequired");
        hooks.add("AlignmentAreaUpdate");
        hooks.add("AlignmentRankUpdate");
        hooks.add("AlignmentSubAreasList");
        hooks.add("AllDownloadTerminated");
        hooks.add("AllianceCreationResult");
        hooks.add("AllianceCreationStarted");
        hooks.add("AllianceGuildLeaving");
        hooks.add("AllianceInvitationStateRecruted");
        hooks.add("AllianceInvitationStateRecruter");
        hooks.add("AllianceInvited");
        hooks.add("AllianceJoined");
        hooks.add("AllianceLeft");
        hooks.add("AllianceList");
        hooks.add("AllianceMembershipUpdated");
        hooks.add("AlliancePrismDialogQuestion");
        hooks.add("AllianceTaxCollectorDialogQuestionExtended");
        hooks.add("AllianceTaxCollectorRemoved");
        hooks.add("AllianceUpdateInformations");
        hooks.add("AlreadyConnected");
        hooks.add("ApisHooksActionsList");
        hooks.add("AreaFightModificatorUpdate");
        hooks.add("ArenaFightProposition");
        hooks.add("ArenaFighterStatusUpdate");
        hooks.add("ArenaRegistrationStatusUpdate");
        hooks.add("ArenaUpdateRank");
        hooks.add("AskExchangeMoveObject");
        hooks.add("AttackPlayer");
        hooks.add("AuthenticationTicket");
        hooks.add("AuthenticationTicketAccepted");
        hooks.add("AuthenticationTicketRefused");
        hooks.add("AuthentificationStart");
        hooks.add("BagListUpdate");
        hooks.add("BankViewContent");
        hooks.add("BidObjectListUpdate");
        hooks.add("BidObjectTypeListUpdate");
        hooks.add("BreedsAvailable");
        hooks.add("BuffAdd");
        hooks.add("BuffDispell");
        hooks.add("BuffRemove");
        hooks.add("BuffUpdate");
        hooks.add("BuyOk");
        hooks.add("CalendarDate");
        hooks.add("CancelCastSpell");
        hooks.add("CastSpellMode");
        hooks.add("CertificateMountData");
        hooks.add("ChallengeInfoUpdate");
        hooks.add("ChannelEnablingChange");
        hooks.add("CharacterCreationResult");
        hooks.add("CharacterCreationStart");
        hooks.add("CharacterDeletionError");
        hooks.add("CharacterImpossibleSelection");
        hooks.add("CharacterLevelUp");
        hooks.add("CharacterNameSuggestioned");
        hooks.add("CharacterSelectionStart");
        hooks.add("CharacterStatsList");
        hooks.add("CharactersListUpdated");
        hooks.add("ChatAppendLine");
        hooks.add("ChatError");
        hooks.add("ChatFocus");
        hooks.add("ChatHyperlink");
        hooks.add("ChatLinkRelease");
        hooks.add("ChatRollOverLink");
        hooks.add("ChatSendPreInit");
        hooks.add("ChatServer");
        hooks.add("ChatServerCopy");
        hooks.add("ChatServerCopyWithObject");
        hooks.add("ChatServerWithObject");
        hooks.add("ChatSmiley");
        hooks.add("ChatSpeakingItem");
        hooks.add("ChatWarning");
        hooks.add("Cinematic");
        hooks.add("ClearChat");
        hooks.add("ClickItemInventory");
        hooks.add("ClickItemShopHV");
        hooks.add("ClickItemStore");
        hooks.add("ClientUIOpened");
        hooks.add("CloseInventory");
        hooks.add("CloseNotification");
        hooks.add("ClosePopup");
        hooks.add("CloseStore");
        hooks.add("ClosingInventory");
        hooks.add("ConfigPropertyChange");
        hooks.add("ConfigStart");
        hooks.add("ConnectionTimerStart");
        hooks.add("ConnexionLost");
        hooks.add("ConsoleAddCmd");
        hooks.add("ConsoleClear");
        hooks.add("ConsoleOutput");
        hooks.add("ContactLook");
        hooks.add("ContactLookById");
        hooks.add("ContextChanged");
        hooks.add("CrafterDirectoryListUpdate");
        hooks.add("CrafterDirectorySettings");
        hooks.add("CreaturesMode");
        hooks.add("CurrentMap");
        hooks.add("DematerializationChanged");
        hooks.add("DishonourChanged");
        hooks.add("DoNothing");
        hooks.add("DocumentReadingBegin");
        hooks.add("DocumentReadingBeginMessage");
        hooks.add("DofusShopArticlesList");
        hooks.add("DofusShopError");
        hooks.add("DofusShopHome");
        hooks.add("DofusShopMoney");
        hooks.add("DofusShopSuccessfulPurchase");
        hooks.add("DoubleClickItemInventory");
        hooks.add("DownloadError");
        hooks.add("DownloadSpeed");
        hooks.add("DropEnd");
        hooks.add("DropStart");
        hooks.add("DungeonPartyFinderAvailableDungeons");
        hooks.add("DungeonPartyFinderRegister");
        hooks.add("DungeonPartyFinderRoomContent");
        hooks.add("EmoteListUpdated");
        hooks.add("EmoteUnabledListUpdated");
        hooks.add("EnabledChannels");
        hooks.add("EnemiesListUpdated");
        hooks.add("EnemyAdded");
        hooks.add("EnemyRemoved");
        hooks.add("EntityMouseOut");
        hooks.add("EntityMouseOver");
        hooks.add("EquipmentObjectMove");
        hooks.add("EquipmentViewContent");
        hooks.add("EstateToSellList");
        hooks.add("ExchangeBankStarted");
        hooks.add("ExchangeBankStartedWithStorage");
        hooks.add("ExchangeBidHouseGenericItemAdded");
        hooks.add("ExchangeBidHouseGenericItemRemoved");
        hooks.add("ExchangeBidHouseInListAdded");
        hooks.add("ExchangeBidHouseItemAddOk");
        hooks.add("ExchangeBidHouseItemRemoveOk");
        hooks.add("ExchangeBidPrice");
        hooks.add("ExchangeBidPriceForSeller");
        hooks.add("ExchangeBidSearchOk");
        hooks.add("ExchangeCraftResult");
        hooks.add("ExchangeCraftSlotCountIncreased");
        hooks.add("ExchangeError");
        hooks.add("ExchangeIsReady");
        hooks.add("ExchangeItemAutoCraftRemaining");
        hooks.add("ExchangeItemAutoCraftStoped");
        hooks.add("ExchangeKamaModified");
        hooks.add("ExchangeLeave");
        hooks.add("ExchangeMultiCraftCrafterCanUseHisRessources");
        hooks.add("ExchangeMultiCraftRequest");
        hooks.add("ExchangeObjectAdded");
        hooks.add("ExchangeObjectModified");
        hooks.add("ExchangeObjectRemoved");
        hooks.add("ExchangeReplayCountModified");
        hooks.add("ExchangeReplyTaxVendor");
        hooks.add("ExchangeRequestCharacterFromMe");
        hooks.add("ExchangeRequestCharacterToMe");
        hooks.add("ExchangeShopStockAddQuantity");
        hooks.add("ExchangeShopStockMouvmentRemoveOk");
        hooks.add("ExchangeShopStockMovementRemoved");
        hooks.add("ExchangeShopStockMovementUpdated");
        hooks.add("ExchangeShopStockRemoveQuantity");
        hooks.add("ExchangeShopStockStarted");
        hooks.add("ExchangeShopStockUpdate");
        hooks.add("ExchangeStartOkCraft");
        hooks.add("ExchangeStartOkHumanVendor");
        hooks.add("ExchangeStartOkJobIndex");
        hooks.add("ExchangeStartOkMount");
        hooks.add("ExchangeStartOkMultiCraft");
        hooks.add("ExchangeStartOkNpcShop");
        hooks.add("ExchangeStartOkNpcTrade");
        hooks.add("ExchangeStarted");
        hooks.add("ExchangeStartedBidBuyer");
        hooks.add("ExchangeStartedBidSeller");
        hooks.add("ExchangeStartedType");
        hooks.add("ExchangeTypesExchangerDescriptionForUser");
        hooks.add("ExchangeTypesItemsExchangerDescriptionForUser");
        hooks.add("ExchangeWeight");
        hooks.add("ExternalNotification");
        hooks.add("FightEvent");
        hooks.add("FightRequestCanceled");
        hooks.add("FightResultClosed");
        hooks.add("FightResultClosed");
        hooks.add("FightResultVictory");
        hooks.add("FightSpellCast");
        hooks.add("FightText");
        hooks.add("FighterInfoUpdate");
        hooks.add("FighterSelected");
        hooks.add("FightersListUpdated");
        hooks.add("FlagAdded");
        hooks.add("FlagRemoved");
        hooks.add("FocusChange");
        hooks.add("FoldAll");
        hooks.add("FriendAdded");
        hooks.add("FriendGuildWarnOnAchievementCompleteState");
        hooks.add("FriendOrGuildMemberLevelUpWarningState");
        hooks.add("FriendRemoved");
        hooks.add("FriendWarningState");
        hooks.add("FriendsListUpdated");
        hooks.add("GameActionFightDeathEnd");
        hooks.add("GameActionFightDying");
        hooks.add("GameActionFightLifePointsVariation");
        hooks.add("GameActionFightPointsUse");
        hooks.add("GameActionFightPointsVariation");
        hooks.add("GameEntityDisposition");
        hooks.add("GameFightEnd");
        hooks.add("GameFightJoin");
        hooks.add("GameFightLeave");
        hooks.add("GameFightOptionStateUpdate");
        hooks.add("GameFightStart");
        hooks.add("GameFightStarting");
        hooks.add("GameFightTurnChangeInformations");
        hooks.add("GameFightTurnEnd");
        hooks.add("GameFightTurnStart");
        hooks.add("GameFightTurnStartPlaying");
        hooks.add("GameRolePlayPlayerLifeStatus");
        hooks.add("GameRolePlayRemoveFight");
        hooks.add("GameRolePlayShowChallenge");
        hooks.add("GameStart");
        hooks.add("GiftAssigned");
        hooks.add("GiftList");
        hooks.add("GuildCreationResult");
        hooks.add("GuildCreationStarted");
        hooks.add("GuildFightAlliesListUpdate");
        hooks.add("GuildFightEnnemiesListUpdate");
        hooks.add("GuildHouseAdd");
        hooks.add("GuildHouseRemoved");
        hooks.add("GuildHousesInformation");
        hooks.add("GuildHousesUpdate");
        hooks.add("GuildInformationsFarms");
        hooks.add("GuildInformationsGeneral");
        hooks.add("GuildInformationsMemberUpdate");
        hooks.add("GuildInformationsMembers");
        hooks.add("GuildInfosUpgrade");
        hooks.add("GuildInvitationStateRecruted");
        hooks.add("GuildInvitationStateRecruter");
        hooks.add("GuildInvited");
        hooks.add("GuildLeft");
        hooks.add("GuildList");
        hooks.add("GuildMemberLeaving");
        hooks.add("GuildMembershipUpdated");
        hooks.add("GuildPaddockAdd");
        hooks.add("GuildPaddockRemoved");
        hooks.add("GuildTaxCollectorAdd");
        hooks.add("GuildTaxCollectorRemoved");
        hooks.add("HideDeadFighters");
        hooks.add("HideNotification");
        hooks.add("HideSummonedFighters");
        hooks.add("HouseBuyResult");
        hooks.add("HouseEntered");
        hooks.add("HouseExit");
        hooks.add("HouseGuildNone");
        hooks.add("HouseGuildRights");
        hooks.add("HouseInformations");
        hooks.add("HouseProperties");
        hooks.add("HouseSold");
        hooks.add("IdentificationFailed");
        hooks.add("IdentificationFailedForBadVersion");
        hooks.add("IdentificationFailedWithDuration");
        hooks.add("IdentificationSuccess");
        hooks.add("IgnoredAdded");
        hooks.add("IgnoredRemoved");
        hooks.add("InactivityNotification");
        hooks.add("InformationPopup");
        hooks.add("InsertHyperlink");
        hooks.add("InsertRecipeHyperlink");
        hooks.add("InstalledModuleList");
        hooks.add("InventoryContent");
        hooks.add("InventoryWeight");
        hooks.add("JobAllowMultiCraftRequest");
        hooks.add("JobCrafterContactLook");
        hooks.add("JobLevelUp");
        hooks.add("JobsExpUpdated");
        hooks.add("JobsListUpdated");
        hooks.add("KamasUpdate");
        hooks.add("KeyDown");
        hooks.add("KeyUp");
        hooks.add("KeyboardShortcut");
        hooks.add("KohStarting");
        hooks.add("KohState");
        hooks.add("KohUpdate");
        hooks.add("KrosmasterAuthToken");
        hooks.add("KrosmasterAuthTokenError");
        hooks.add("KrosmasterInventory");
        hooks.add("KrosmasterInventoryError");
        hooks.add("KrosmasterTransfer");
        hooks.add("LaggingNotification");
        hooks.add("LangFileLoaded");
        hooks.add("LeaveDialog");
        hooks.add("LegalAgreementsLoaded");
        hooks.add("LevelUiClosed");
        hooks.add("LifePointsRegenBegin");
        hooks.add("LivingObjectAssociate");
        hooks.add("LivingObjectDissociate");
        hooks.add("LivingObjectFeed");
        hooks.add("LivingObjectMessage");
        hooks.add("LivingObjectUpdate");
        hooks.add("LockableCodeResult");
        hooks.add("LockableShowCode");
        hooks.add("LockableStateUpdateHouseDoor");
        hooks.add("LoginQueueStart");
        hooks.add("LoginQueueStatus");
        hooks.add("MailStatus");
        hooks.add("MapComplementaryInformationsData");
        hooks.add("MapDisplay");
        hooks.add("MapFightCount");
        hooks.add("MapHintsFilter");
        hooks.add("MapRunningFightDetails");
        hooks.add("MapRunningFightList");
        hooks.add("MapWithMonsters");
        hooks.add("MapsLoadingComplete");
        hooks.add("MemberWarningState");
        hooks.add("MimicryObjectAssociated");
        hooks.add("MimicryObjectPreview");
        hooks.add("ModuleInstallationError");
        hooks.add("ModuleInstallationProgress");
        hooks.add("ModuleList");
        hooks.add("MoodResult");
        hooks.add("MountEquipedError");
        hooks.add("MountReleased");
        hooks.add("MountRenamed");
        hooks.add("MountRiding");
        hooks.add("MountSet");
        hooks.add("MountStableUpdate");
        hooks.add("MountSterilized");
        hooks.add("MountUnSet");
        hooks.add("MountXpRatio");
        hooks.add("MouseAltClick");
        hooks.add("MouseAltDoubleClick");
        hooks.add("MouseClick");
        hooks.add("MouseCtrlClick");
        hooks.add("MouseCtrlDoubleClick");
        hooks.add("MouseMiddleClick");
        hooks.add("MouseShiftClick");
        hooks.add("NewAwayMessage");
        hooks.add("NewMessage");
        hooks.add("NewsLogin");
        hooks.add("NicknameAccepted");
        hooks.add("NicknameRefused");
        hooks.add("NicknameRegistration");
        hooks.add("NonSubscriberPopup");
        hooks.add("Notification");
        hooks.add("NotificationList");
        hooks.add("NotificationReset");
        hooks.add("NpcDialogCreation");
        hooks.add("NpcDialogCreationFailure");
        hooks.add("NpcDialogQuestion");
        hooks.add("NumericWhoIs");
        hooks.add("ObjectAdded");
        hooks.add("ObjectDeleted");
        hooks.add("ObjectModified");
        hooks.add("ObjectQuantity");
        hooks.add("ObjectSelected");
        hooks.add("OpenArena");
        hooks.add("OpenBidHouse");
        hooks.add("OpenBook");
        hooks.add("OpenCartographyPopup");
        hooks.add("OpenChatOptions");
        hooks.add("OpenFeed");
        hooks.add("OpenGrimoireAlignmentTab");
        hooks.add("OpenGrimoireCalendarTab");
        hooks.add("OpenGrimoireJobTab");
        hooks.add("OpenGrimoireQuestTab");
        hooks.add("OpenGrimoireSpellTab");
        hooks.add("OpenInventory");
        hooks.add("OpenKrosmaster");
        hooks.add("OpenKrosmaster");
        hooks.add("OpenKrosmasterCollection");
        hooks.add("OpenLivingObject");
        hooks.add("OpenMainMenu");
        hooks.add("OpenMap");
        hooks.add("OpenMount");
        hooks.add("OpenMountFeed");
        hooks.add("OpenOneAlliance");
        hooks.add("OpenOneGuild");
        hooks.add("OpenRecipe");
        hooks.add("OpenReport");
        hooks.add("OpenSet");
        hooks.add("OpenSmileys");
        hooks.add("OpenSocial");
        hooks.add("OpenSpellInterface");
        hooks.add("OpenStats");
        hooks.add("OpenStatusMenu");
        hooks.add("OpenTeamSearch");
        hooks.add("OpenWebPortal");
        hooks.add("OpeningContextMenu");
        hooks.add("OptionHelpWanted");
        hooks.add("OptionLockFight");
        hooks.add("OptionLockParty");
        hooks.add("OptionWitnessForbidden");
        hooks.add("OrderFightersSwitched");
        hooks.add("OrnamentUpdated");
        hooks.add("OrnamentsListUpdated");
        hooks.add("OtherPlayerListUpdate");
        hooks.add("PackRestrictedSubArea");
        hooks.add("PaddockSellBuyDialog");
        hooks.add("PaddockedMountData");
        hooks.add("PartDownloadInfo");
        hooks.add("PartInfo");
        hooks.add("PartsList");
        hooks.add("PartyCancelledInvitation");
        hooks.add("PartyCannotJoinError");
        hooks.add("PartyCompanionMemberUpdate");
        hooks.add("PartyInvitation");
        hooks.add("PartyJoin");
        hooks.add("PartyLeaderUpdate");
        hooks.add("PartyLeave");
        hooks.add("PartyLocateMembers");
        hooks.add("PartyLoyaltyStatus");
        hooks.add("PartyMemberFollowUpdate");
        hooks.add("PartyMemberLifeUpdate");
        hooks.add("PartyMemberRemove");
        hooks.add("PartyMemberUpdate");
        hooks.add("PartyMemberUpdateDetails");
        hooks.add("PartyNameUpdate");
        hooks.add("PartyRefuseInvitationNotification");
        hooks.add("PartyUpdate");
        hooks.add("PaymentCraftList");
        hooks.add("PhoenixUpdate");
        hooks.add("PlayedCharacterLookChange");
        hooks.add("PlayerAggression");
        hooks.add("PlayerFightFriendlyAnswer");
        hooks.add("PlayerFightFriendlyAnswered");
        hooks.add("PlayerFightFriendlyRequested");
        hooks.add("PlayerFightMove");
        hooks.add("PlayerFightRequestSent");
        hooks.add("PlayerIsDead");
        hooks.add("PlayerListUpdate");
        hooks.add("PlayerMove");
        hooks.add("PlayerNewSpell");
        hooks.add("PlayerStatusUpdate");
        hooks.add("PonyDialogCreation");
        hooks.add("PopupWarning");
        hooks.add("PortalDialogCreation");
        hooks.add("PortalDialogQuestion");
        hooks.add("PostMouseClick");
        hooks.add("PresetError");
        hooks.add("PresetSelected");
        hooks.add("PresetsUpdate");
        hooks.add("PricesUpdate");
        hooks.add("PrismAttacked");
        hooks.add("PrismDialogCreation");
        hooks.add("PrismFightUpdate");
        hooks.add("PrismInFightAdded");
        hooks.add("PrismInFightRemoved");
        hooks.add("PrismsInFightList");
        hooks.add("PrismsList");
        hooks.add("PrismsListUpdate");
        hooks.add("PurchasableDialog");
        hooks.add("PvpAvaStateChange");
        hooks.add("QualitySelectionRequired");
        hooks.add("QuestInfosUpdated");
        hooks.add("QuestListUpdated");
        hooks.add("QuestObjectiveValidated");
        hooks.add("QuestStarted");
        hooks.add("QuestStepStarted");
        hooks.add("QuestStepValidated");
        hooks.add("QuestValidated");
        hooks.add("QueueStatus");
        hooks.add("ReadyToFight");
        hooks.add("RecipeSelected");
        hooks.add("RefreshTips");
        hooks.add("RemindTurn");
        hooks.add("RemoveAllFlags");
        hooks.add("RemoveMapFlag");
        hooks.add("RewardableAchievementsVisible");
        hooks.add("RoleplayBuffViewContent");
        hooks.add("SecureModeChange");
        hooks.add("SelectedServerFailed");
        hooks.add("SelectedServerRefused");
        hooks.add("SellOk");
        hooks.add("SellerObjectListUpdate");
        hooks.add("ServerConnectionFailed");
        hooks.add("ServerSelectionStart");
        hooks.add("ServersList");
        hooks.add("SetDofusQuality");
        hooks.add("SetUpdate");
        hooks.add("ShortcutBarViewContent");
        hooks.add("ShortcutUpdate");
        hooks.add("ShortcutsMovementAllowed");
        hooks.add("ShowCell");
        hooks.add("ShowMonsterArtwork");
        hooks.add("ShowMonstersInfo");
        hooks.add("ShowObjectLinked");
        hooks.add("ShowPlayersNames");
        hooks.add("ShowSmilies");
        hooks.add("ShowTacticMode");
        hooks.add("SilentWhoIs");
        hooks.add("SlaveStatsList");
        hooks.add("SlotDropedNorBeriliaNorWorld");
        hooks.add("SlotDropedOnBerilia");
        hooks.add("SlotDropedOnWorld");
        hooks.add("SmileysStart");
        hooks.add("SpectateUpdate");
        hooks.add("SpectatorWantLeave");
        hooks.add("SpellForgetUI");
        hooks.add("SpellForgotten");
        hooks.add("SpellInventoryUpdate");
        hooks.add("SpellList");
        hooks.add("SpellMovement");
        hooks.add("SpellMovementAllowed");
        hooks.add("SpellUpgradeFail");
        hooks.add("SpellUpgradeSuccess");
        hooks.add("SpouseFollowStatusUpdated");
        hooks.add("SpouseUpdated");
        hooks.add("StartZoom");
        hooks.add("StatsUpgradeResult");
        hooks.add("StopCinematic");
        hooks.add("StorageFilterUpdated");
        hooks.add("StorageInventoryContent");
        hooks.add("StorageKamasUpdate");
        hooks.add("StorageObjectRemove");
        hooks.add("StorageObjectUpdate");
        hooks.add("StorageViewContent");
        hooks.add("SubscribersList");
        hooks.add("SubscriptionZone");
        hooks.add("SwitchBannerTab");
        hooks.add("SwitchingBidMode");
        hooks.add("TabNameChange");
        hooks.add("TaxCollectorAttackedResult");
        hooks.add("TaxCollectorDialogQuestionBasic");
        hooks.add("TaxCollectorDialogQuestionExtended");
        hooks.add("TaxCollectorError");
        hooks.add("TaxCollectorListUpdate");
        hooks.add("TaxCollectorMovement");
        hooks.add("TaxCollectorMovementAdd");
        hooks.add("TaxCollectorMovementRemove");
        hooks.add("TaxCollectorUpdate");
        hooks.add("TeleportDestinationList");
        hooks.add("TextActionInformation");
        hooks.add("TextInformation");
        hooks.add("TextureLoadFailed");
        hooks.add("TitleUpdated");
        hooks.add("TitlesListUpdated");
        hooks.add("ToggleChatLog");
        hooks.add("ToggleConsole");
        hooks.add("TreasureHuntAvailableRetryCountUpdate");
        hooks.add("TreasureHuntFinished");
        hooks.add("TreasureHuntLegendaryUiUpdate");
        hooks.add("TreasureHuntUpdate");
        hooks.add("TurnCountUpdated");
        hooks.add("TutorielAvailable");
        hooks.add("UiLoaded");
        hooks.add("UiUnloaded");
        hooks.add("UiUnloading");
        hooks.add("UnexpectedSocketClosure");
        hooks.add("UpdateChatOptions");
        hooks.add("UpdateError");
        hooks.add("UpdateFinished");
        hooks.add("UpdatePreFightersList");
        hooks.add("UpdateProgress");
        hooks.add("UpdateStepChange");
        hooks.add("WaveUpdated");
        hooks.add("WeaponUpdate");
        hooks.add("WindowResize");
        hooks.add("WorldMouseWheel");
        hooks.add("WorldRightClick");
        hooks.add("ZaapList");
    }

    public static void main(String [] args) throws Exception{
        new File("d2hooks").mkdir();

        for(String hook : hooks) {
            PrintWriter writer = new PrintWriter("d2hooks/"+hook + ".as", "UTF-8");
            writer.print(buildHookAS(hook));
            writer.close();
        }

        new File("d2actions").mkdir();
        for(String action : actions) {
            try {
                processAction(action);
            }catch(Exception e) { }
        }

    }

    private final static String METHOD_START = "      public static function create(";

    private static final void processAction(String actionName) throws Exception{
        //Set all *Action.as of com.ankamagames.* files on this folder
        List<String> lines = Files.readAllLines(Paths.get("Dofus2Actions/"+actionName + "Action.as"), StandardCharsets.UTF_8);
        for(String line : lines) {
            if(line.startsWith(METHOD_START)) {
                String actionParams = line.substring(METHOD_START.length());
                actionParams = actionParams.replace(") : "+actionName+"Action {", "");
                PrintWriter writer = new PrintWriter("d2actions/"+actionName + ".as", "UTF-8");
                writer.print(buildActionAS(actionName, actionParams));
                writer.close();
            }
        }
    }

    private final static String BR = "\r\n";

    private static String buildActionAS(String action, String parameters) {
        StringBuilder builder = new StringBuilder();

        builder.append("package d2actions").append(BR);
        builder.append("{").append(BR);
        builder.append("   public class "+action+" extends Object implements IAction").append(BR);
        builder.append("   {").append(BR);
        builder.append("      ").append(BR);
        builder.append("      public function "+action+"("+parameters+") {").append(BR);
        builder.append("         super();").append(BR);
        builder.append("         this._params = ["+paramsListOfParamsMethod(parameters)+"];").append(BR);
        builder.append("      }").append(BR);
        builder.append("      ").append(BR);
        builder.append("      public static const NEED_INTERACTION:Boolean = false;").append(BR);
        builder.append("      ").append(BR);
        builder.append("      public static const NEED_CONFIRMATION:Boolean = false;").append(BR);
        builder.append("      ").append(BR);
        builder.append("      public static const MAX_USE_PER_FRAME:int = 1;").append(BR);
        builder.append("      ").append(BR);
        builder.append("      public static const DELAY:int = 0;").append(BR);
        builder.append("      ").append(BR);
        builder.append("      private var _params:Array;").append(BR);
        builder.append("      ").append(BR);
        builder.append("      public function get parameters() : Array {").append(BR);
        builder.append("         return this._params;").append(BR);
        builder.append("      }").append(BR);
        builder.append("   }").append(BR);
        builder.append("}").append(BR);


        return builder.toString();
    }

    private final static Pattern PARAMS_METHODS_PATTERN = Pattern.compile("([a-zA-Z0-9]+):([a-zA-Z0-9]+)");

    public final static String paramsListOfParamsMethod(String params) {
        return PARAMS_METHODS_PATTERN.matcher(params).replaceAll("$1");
    }

    private static String buildHookAS(String hook) {
        StringBuilder builder = new StringBuilder();
        builder.append("package d2hooks").append(BR);
        builder.append("{").append(BR);
        builder.append("   public class "+hook+" extends Object").append(BR);
        builder.append("   {").append(BR);
        builder.append(BR);
        builder.append(BR);
        builder.append("      public function "+hook+"() {").append(BR);
        builder.append("         super();").append(BR);
        builder.append("      }").append(BR);
        builder.append("   }").append(BR);
        builder.append("}").append(BR);
        return builder.toString();
    }

}
